name: S905D KERNEL CI
on:
  release:
    types: [published]
  push:
    branches:
      - 6.x
    paths:
      - ".config"
      - ".github/workflows/main.yml"
      - "patch/**"
      - "*.sh"
      - "*.dts"
  watch:
    types: [started]
env:
  KVER: 6.12.55
  ARCH: arm64
  CROSS_COMPILE: aarch64-none-linux-gnu-
  LOCALVERSION: -aml-s905d-starx-action
  # CI environment variables for scripts
  CI: true
  FORCE_REINSTALL: true
jobs:
  build:
    runs-on: ubuntu-24.04
    if: github.event.repository.owner.id == github.event.sender.id
    env:
      BUILD_DIR: ${{ github.workspace }}/build
    steps:
      - name: Set BUILD_STAGING_DIR
        run: echo "BUILD_STAGING_DIR=${{ env.BUILD_DIR }}/linux-${{ env.KVER }}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v5.0.0
        
      - name: Make scripts executable
        run: |
          chmod +x setup_aarch64_toolchain.sh
          chmod +x setup_new_kernel.sh
          chmod +x install_kernel.sh
          chmod +x transfer.sh

      - name: Host info
        run: |
          pwd
          lscpu
          free -h
          df -h

      - name: Install requirements
        run: |
          sudo dpkg --add-architecture arm64
          sudo rm -f /etc/apt/sources.list
          sudo rm -f /etc/apt/sources.list.d/*
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports noble main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/ports.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports noble-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports noble-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports.list
          echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu noble main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/ubuntu.list
          echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu noble-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ubuntu.list
          echo "deb [arch=amd64] http://security.ubuntu.com/ubuntu noble-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ubuntu.list
          sudo apt-mark hold firefox
          sudo apt-get update
          sudo apt-get upgrade -y
          sudo apt-get install -y libssl-dev:arm64 debhelper-compat gcc-aarch64-linux-gnu git fakeroot build-essential ncurses-dev xz-utils libssl-dev bc flex libelf-dev bison libncurses-dev autoconf dkms libudev-dev libpci-dev libiberty-dev u-boot-tools lzop

      - name: Install cross compile toolchain
        run: ./setup_aarch64_toolchain.sh
        
      - name: Download and uncompress kernel
        run: ./setup_new_kernel.sh $KVER $BUILD_DIR

      - name: Verify toolchain installation
        run: |
          echo "=== Toolchain Verification ==="
          which aarch64-none-linux-gnu-gcc || echo "ERROR: Toolchain not found in PATH"
          aarch64-none-linux-gnu-gcc --version || echo "ERROR: Cannot execute gcc"
          echo "PATH=$PATH"
          echo "CROSS_COMPILE=$CROSS_COMPILE"
          echo "CC=$CC"
          
      - name: Apply patches
        run: |
          cd $BUILD_STAGING_DIR
          for p in ../../patch/*; do 
            echo "Applying patch: $p"
            if ! patch --ignore-whitespace -t -p1 -N < "$p"; then
              echo "WARNING: Patch $p failed or already applied"
            fi
          done
          cp -v ../../meson-gxl-s905d-phicomm-n1.dts arch/arm64/boot/dts/amlogic/meson-gxl-s905d-phicomm-n1.dts 
      - name: Build Kernel
        run: |
          # Verify toolchain is available
          if ! command -v "${CROSS_COMPILE}gcc" &>/dev/null; then
            echo "ERROR: Cross compiler not found: ${CROSS_COMPILE}gcc"
            echo "Available aarch64 tools:"
            ls -la /home/runner/toolchain/bin/ | grep aarch64 || echo "No toolchain found"
            exit 1
          fi
          
          # Set up build environment
          export CC="${CROSS_COMPILE}gcc"
          echo "=== Build Environment ==="
          printenv | grep -E "(ARCH|CROSS_COMPILE|CC|KVER|LOCALVERSION)" | sort
          echo "=========================="
          
          cd $BUILD_STAGING_DIR
          cp -v ../../.config .config
          
          echo "=== Configuring kernel ==="
          time make -j$(nproc) olddefconfig
          
          echo "=== Building kernel (this may take 20-30 minutes) ==="
          time make -j$(nproc) bindeb-pkg

      - name: Extract files
        run: |
          cd $BUILD_STAGING_DIR
          echo "=== Extracting build artifacts ==="
          
          # Copy kernel image
          if [[ -f "arch/arm64/boot/Image" ]]; then
            cp arch/arm64/boot/Image $GITHUB_WORKSPACE
            echo "✓ Copied kernel Image"
          else
            echo "✗ ERROR: Kernel Image not found"
            exit 1
          fi
          
          # Copy device tree files
          if ls arch/arm64/boot/dts/amlogic/*.dtb &>/dev/null; then
            cp arch/arm64/boot/dts/amlogic/*.dtb $GITHUB_WORKSPACE
            echo "✓ Copied DTB files"
          else
            echo "✗ WARNING: No DTB files found"
          fi
          
          # Copy debian packages
          if find ../ -maxdepth 1 -type f -name '*.deb' | head -1 | read; then
            find ../ -maxdepth 1 -type f -name '*.deb' -exec cp -v '{}' $GITHUB_WORKSPACE \;
            echo "✓ Copied DEB packages"
          else
            echo "✗ ERROR: No DEB packages found"
            exit 1
          fi

      - uses: actions/upload-artifact@v4.6.2
        with:
          name: Kernel ${{ env.KVER }}
          include-hidden-files: true
          path: |
            install_kernel.sh
            Image
            *${{ env.KVER }}*
            .config
            *.dtb

      - name: ZIP FILES
        run: |
          echo "=== Files to zip ==="
          ls -la install_kernel.sh Image *$KVER* .config *.dtb || echo "Some files may be missing"
          zip "$KVER.zip" install_kernel.sh Image *$KVER* .config *.dtb

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ env.KVER }}.zip
