name: S905D KERNEL CI
on:
  release:
    types: published
  push:
    branches:
      - master
    paths:
      - '.config'
      - '.github/workflows/main.yml'
      - 'patch/**'
  watch:
    types: [started]
env:
  BUILD_DIR: /tmp/ramfs 
  MODURL: https://github.com/RinCat/RTL88x2BU-Linux-Driver 
  INSTALLM_URL: https://raw.githubusercontent.com/SuzukiHonoka/s905d-kernel-precompiled/master/install_kmod.sh
  INSTALL_URL: https://raw.githubusercontent.com/SuzukiHonoka/s905d-kernel-precompiled/master/install_kernel.sh 
  CONFIG_URL: https://raw.githubusercontent.com/SuzukiHonoka/s905d-kernel-precompiled/master/.config 
  KURL:  https://github.com/SuzukiHonoka/PHICOMM_N1_SHELL_API/raw/master/setup_new_kernel.sh
  INSTALL_TOOLCHAIN: https://github.com/SuzukiHonoka/PHICOMM_N1_SHELL_API/raw/master/setup_aarch64_toolchain.sh
  ARCH: arm64
  CROSS_COMPILE: /opt/toolchain/aarch64/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu-
  KVER: 5.15.32
  LOCALVERSION: -aml-s905d-starx-action
jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.4
    - name: Host info
      run: |
        pwd
        lscpu
        free -h
        df -h 
    - name: Installing requirements 
      run: |
        sudo apt-get update
        sudo apt-get install -y git fakeroot build-essential ncurses-dev xz-utils libssl-dev bc flex libelf-dev bison libncurses-dev autoconf dkms libudev-dev libpci-dev libiberty-dev u-boot-tools lzop
    - name: Download scripts
      run: |
        wget $INSTALL_TOOLCHAIN
        wget $KURL
    - name: Clone Repos
      run: |
        sh setup_new_kernel.sh $KVER
        git clone --depth=1 $MODURL /tmp/ramfs/build/KMOD
    - name: Installing cross compile toolchain
      run: sh setup_aarch64_toolchain.sh
    - name: Build Kernel  
      run: |
        cd /tmp/ramfs/build/linux-$KVER
        for p in `ls $GITHUB_WORKSPACE/patch`; do patch --ignore-whitespace -t -p1 -N < $GITHUB_WORKSPACE/patch/$p; done
        cp $GITHUB_WORKSPACE/.config .config
        make -j$(nproc) oldconfig
        make -j$(nproc) bindeb-pkg
    - name: Extract Binaries
      run: | 
        cd /tmp/ramfs/build/linux-$KVER
        cp arch/arm64/boot/Image $GITHUB_WORKSPACE
        cp arch/arm64/boot/dts/amlogic/*.dtb $GITHUB_WORKSPACE
        rsync -a ../*$KVER* --exclude=linux-$KVER $GITHUB_WORKSPACE
    - name: Build KERNEL MOD
      run: |
        # cd /tmp/ramfs/build/KMOD
        # make -j$(nproc) ARCH=arm64 CROSS_COMPILE=/tmp/ramfs/toolchain/gcc-arm-10.2-2020.11-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu- KSRC=/tmp/ramfs/build/linux-$KVER
        # cp 88x2bu.ko $GITHUB_WORKSPACE
    - uses: actions/upload-artifact@v2
      with:
        name: Kernel ${{ env.KVER }}
        path: |
          88x2bu.ko
          install_kmod.sh
          install_kernel.sh
          Image
          *${{ env.KVER }}*
          .config
          *.dtb
    - name: ZIP FILES
      run: |
        cd $GITHUB_WORKSPACE
        zip data.zip install_kernel.sh Image *${{ env.KVER }}* .config *.dtb 88x2bu.ko install_kmod.sh
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.KVER }}
        release_name: Linux Kernel ${{ env.KVER }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./data.zip
        asset_name: Kernel ${{ env.KVER }}.zip
        asset_content_type: application/zip
